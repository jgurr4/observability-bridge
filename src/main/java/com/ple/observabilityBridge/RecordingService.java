/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ple.observabilityBridge;

import com.ple.util.*;

/**
 * Should only be used by a single thread. If it is needed in another thread, pass a cloned instance.
 */
@Immutable
public class RecordingService {

  public static final RecordingService empty = make();
  public final IList<RecordingHandler> handlers;

  public static RecordingService make(RecordingHandler... handlers) {
    return new RecordingService(IArrayList.make(handlers));
  }

  private RecordingService(IList<RecordingHandler> handlers) {
    this.handlers = handlers;
  }

  public ObservabilityContext open(ObservabilityContext context, String group, IMap<String, String> dimensions) {
    for (RecordingHandler handler : handlers) {
      final HandlerContext handlerContext = handler.open(context.get(handler), group, dimensions);
      context = context.put(handler, handlerContext);
    }
    return context;
  }

  public ObservabilityContext open(ObservabilityContext context, String group, Object... dimensions) {
    return open(context, group, IArrayMap.make(dimensions));
  }

  public ObservabilityContext open(ObservabilityContext context, String group, RecordingHandler handler) {
    context.put(handler, JaegerContext.make(null));
    return open(context, group, IArrayMap.empty);
  }

  public ObservabilityContext close(ObservabilityContext context, String group, IMap<String, String> dimensions) {
    for (RecordingHandler handler : handlers) {
      final HandlerContext handlerContext = handler.close(context.get(handler), group, dimensions);
      context = context.put(handler, handlerContext);
    }
    return context;
  }

  public ObservabilityContext close(ObservabilityContext context, String group, Object... dimensions) {
    return close(context, group, IArrayMap.make(dimensions));
  }

  public ObservabilityContext close(ObservabilityContext context, String group) {
    return close(context, group, IArrayMap.empty);
  }

  public ObservabilityContext log(ObservabilityContext context, String group, int importance,
                                  IMap<String, String> dimensions) {
    for (RecordingHandler handler : handlers) {
      final HandlerContext handlerContext = handler.log(context.get(handler), group, dimensions, importance);
      context = context.put(handler, handlerContext);
    }
    return context;
  }

  public ObservabilityContext log(ObservabilityContext context, String group, int importance, String... dimensions) {
    return log(context, group, importance, IArrayMap.make(dimensions));
  }

  public ObservabilityContext log(ObservabilityContext context, String group, String... dimensions) {
    return log(context, group, 0, IArrayMap.make(dimensions));
  }

}
